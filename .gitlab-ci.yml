default:
  image: $CI_REGISTRY_IMAGE:$CI_PIPELINE_IID
  artifacts:
    exclude:
      - cosmos/**
    paths:
      - "**/*.nupkg"
    expire_in: 1 day

stages:
  - setup
  - test
  - deploy

docker-setup:
  stage: setup
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/CICD/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_IID}"

pages:
  stage: deploy
  script:
    - make build
    - dotnet tool update -g docfx
    - ~/.dotnet/tools/docfx build ./docfx/docfx.json -o public
  artifacts:
    paths:
      - public


XSharp-test:
  stage: test
  script:
    - cd ./Tests/UNit/Liquip.XSharp.UNitTest
    - dotnet test
#
#XSharp-deploy:
#  stage: deploy
#  script:
#    - ./CICD/build_and_push_nuget.sh ./Liquip.XSharp
#
#
#Plugs:
#  stage: deploy
#  script:
#    - ./CICD/build_and_push_nuget.sh ./Liquip.Plugs
#
#
#Liquip:
#  stage: deploy
#  script:
#    - ./CICD/build_and_push_nuget.sh ./Liquip
#
#
#Liquip.Core:
#  stage: deploy
#  script:
#    - ./CICD/build_and_push_nuget.sh ./Liquip.Core
#
#
#Liquip.Common:
#  stage: deploy
#  script:
#    - ./CICD/build_and_push_nuget.sh ./Liquip.Common
#
#
#Logger:
#  stage: deploy
#  script:
#    - ./CICD/build_and_push_nuget.sh ./Liquip.Logger
#
#
#
#Memory:
#  stage: deploy
#  script:
#    - ./CICD/build_and_push_nuget.sh ./Liquip.Memory
#
#
#
#Threading:
#  stage: deploy
#  script:
#    - ./CICD/build_and_push_nuget.sh ./Liquip.Threading
#
#
#Threading.Plug:
#  stage: deploy
#  script:
#    - ./CICD/build_and_push_nuget.sh ./Liquip.Threading.Plugs
#
#
#Limine:
#  stage: deploy
#  script:
#    - ./CICD/build_and_push_nuget.sh ./Liquip.Limine
#
#
#FileSystems:
#  stage: deploy
#  script:
#    - ./CICD/build_and_push_nuget.sh ./Liquip.FileSystems
#
#
#VirtIO:
#  stage: deploy
#  script:
#    - ./CICD/build_and_push_nuget.sh ./Liquip.Driver.VirtIO
#
#
#CosmosManager:
#  stage: deploy
#  script:
#    - ./CICD/build_and_push_nuget.sh ./CosmosManager

